{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ncm-issuer","text":""},{"location":"#what-is-ncm-issuer","title":"What is ncm-issuer?","text":"<p>ncm-issuer is a Kubernetes controller (external cert-manager issuer) that allows to integrate with Nokia NetGuard Certificate Manager (NCM) PKI system to sign certificate requests. The integration with NCM makes it easy to obtain non-selfsigned certificates for applications and to ensure that they are valid and up to date.</p>"},{"location":"#how-to-get-started","title":"How to get started?","text":"<p>Simply click the documentation tab in the navigation panel. All the steps required to install the ncm-issuer are described there, along with a tutorial on how to issue your first certificate. If you feel that something is missing  in the documentation, please report it to one of the maintainers, and it will definitely be added soon!</p>"},{"location":"#maintainers","title":"Maintainers","text":"<p> Dawid Machoczek (@raczu)</p> <p> Adam Korba (@BbqGamer)</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of Apache 2.0 License and available on GitHub.</p>"},{"location":"documentation/configuration/","title":"Configuration","text":"<p>To make the ncm-issuer work properly, it is necessary to create few Kubernetes secrets that contains credentials to NCM REST API and optional TLS configuration.</p> <p></p>"},{"location":"documentation/configuration/#ncm-rest-api-credentials","title":"NCM REST API credentials","text":"<pre><code>kubectl create secret generic \\\n&lt;secret-name&gt; \\\n-n &lt;namespace&gt; \\\n--from-literal=username=&lt;username&gt; \\\n--from-literal=usrPassword=&lt;password&gt;\n</code></pre>"},{"location":"documentation/configuration/#tls-without-client-authentication","title":"TLS without client authentication","text":"<pre><code>kubectl create secret generic \\\n&lt;secret-name&gt; \\\n-n &lt;namespace&gt; \\\n--from-file=cacert=&lt;ca-for-tls.pem&gt;\n</code></pre>"},{"location":"documentation/configuration/#tls-with-client-authentication","title":"TLS with client authentication","text":"<pre><code>kubectl create secret generic \\\n&lt;secret-name&gt; \\\n-n &lt;namespace&gt; \\\n--from-file=cacert=&lt;ca-for-tls.pem&gt; \\\n--from-file=key=&lt;client-auth-pkey.pem&gt; \\\n--from-file=cert=&lt;client-auth-cert.pem&gt;\n</code></pre> <p>Tip</p> <p>To make sure that specific secret have been created correctly, you can check this by using command:</p> <pre><code>kubectl -n &lt;namespace&gt; describe secrets &lt;secret-name&gt;\n</code></pre>"},{"location":"documentation/installation/","title":"Installation","text":""},{"location":"documentation/installation/#prerequisites","title":"Prerequisites","text":"<p>Prerequisites for using ncm-issuer:</p> <ul> <li>NCM release 21 or later,</li> <li>Kubernetes version 1.18 - 1.27,</li> <li>cert-manager version 1.0.0 or later,</li> <li>Docker version 20.10.0 or later,</li> <li>Helm v3.</li> </ul> <p>Note</p> <p>Install docker-re instead of default if you are using CentOS, RedHat or Fedora!</p>"},{"location":"documentation/installation/#installing-with-helm","title":"Installing with Helm","text":"<p>The easiest way to install ncm-issuer in Kubernetes cluster is to use Helm. The image will be automatically downloaded from public repository.</p> <p></p> <p>Add the Helm repository:</p> <pre><code>helm repo add nokia https://nokia.github.io/ncm-issuer/charts\n</code></pre> <p>Update your local Helm chart repository cache:</p> <pre><code>helm repo update\n</code></pre> <p>Install ncm-issuer using the command:</p> <pre><code>helm install \\\nncm-issuer nokia/ncm-issuer \\\n--create-namespace --namespace ncm-issuer \n</code></pre> <p>On the other hand, if you did not add Helm repository, but downloaded the packaged version of ncm-issuer use:</p> <pre><code>helm install \\\nncm-issuer \\\n--create-namespace --namespace ncm-issuer \\\nncm-issuer/charts/ncm-issuer\n</code></pre>"},{"location":"documentation/installation/#using-own-local-or-remote-registry","title":"Using own (local or remote) registry","text":"<p>In case you want to use your own registry, just change the value pointing to a specific registry in the <code>values.yaml</code> file in directory that contains Helm files. Then just repeat the steps mentioned above.</p> <pre><code>sed -i \"s|docker.io/misiektoja|&lt;your-registry&gt;|g\" values.yaml\n</code></pre> <p>Note</p> <p>Using this command will also change the registry pointing to the image location of sidecar. Bear this in mind if you want to use sidecar as well.</p> <p>However, if you do not know where to get image from, because you cloned the repository just use the command:</p> <pre><code>make docker-build\n</code></pre> <p>or (if you also want to save image)</p> <pre><code>make docker-save\n</code></pre> <p>Saved image should appear in the path <code>./builds/ncm-issuer-images/</code>.</p>"},{"location":"documentation/troubleshooting/","title":"Troubleshooting","text":""},{"location":"documentation/troubleshooting/#getting-ncm-issuer-logs","title":"Getting ncm-issuer logs","text":"<p>In case of any problem, besides checking the status of created resources, you can also check the <code>ncm-issuer</code> pod logs:</p> <pre><code>kubectl -n ncm-issuer logs -f `kubectl get pods -A -l app=ncm-issuer -o jsonpath='{.items[0].metadata.name}'`\n</code></pre> <p>If you deployed troubleshooting sidecar as well, you can check the <code>ncm-issuer</code> pod logs this way:</p> <pre><code>kubectl -n ncm-issuer logs -c ncm-issuer -f `kubectl get pods -A -l app=ncm-issuer -o jsonpath='{.items[0].metadata.name}'`\n</code></pre>"},{"location":"documentation/troubleshooting/#setting-logging-verbosity-level","title":"Setting logging verbosity level","text":"<p>In the case of increasing logging verbosity level change the <code>logging.logLevel</code> in <code>values.yaml</code> to wanted value and update your deployment. To get all possible log messages, simply set the <code>logging.logLevel</code> to 3, you can also additionally change the <code>logging.stacktraceLevel</code> to <code>error</code>.</p>"},{"location":"documentation/troubleshooting/#enabling-troubleshooting-sidecar","title":"Enabling troubleshooting sidecar","text":"<p>There is also the possibility of using sidecar for debugging purposes - just change the value of <code>sidecar.enabled</code> to true in <code>values.yaml</code> and update your deployment.</p>"},{"location":"documentation/CRDs/cluster-issuer/","title":"ClusterIssuer","text":"<p>With the <code>ClusterIssuer</code>, the definition does not differ from that presented with <code>Issuer</code>, and the only differences are in the field <code>kind</code> and the non-existence of field <code>.metadata.namespace</code> due to <code>Cluster</code> scope reasons.</p>"},{"location":"documentation/CRDs/cluster-issuer/#resource-definition","title":"Resource definition","text":"<p>Below is an example <code>yaml</code> file containing <code>ClusterIssuer</code> definition:</p> clusterissuer.yaml<pre><code>apiVersion: certmanager.ncm.nokia.com/v1\nkind: ClusterIssuer\nmetadata:\n  name: example-ncm-clusterissuer\nspec:\n  caName: ncm-ca\n  caID: e1DefAscx\n  provisioner:\n    mainAPI: https://nokia-ncm.local\n    backupAPI: https://nokia-backup-ncm.local\n    httpClientTimeout: 10s\n    healthCheckerInterval: 1m\n    authRef:\n      name: ncm-rest-auth\n      namespace: ncm-ns\n    tlsRef:\n      name: ncm-tls\n      namespace: ncm-ns\n  profileId: \"101\"\n  useProfileIDForRenew: true\n  reenrollmentOnRenew: true\n  noRoot: true\n  chainInSigner: false\n  onlyEECert: true\n</code></pre> <p>Warning</p> <p>With release <code>1.1.0-1.1.0</code> the name of some fields in <code>Issuer</code> has changed, but old names are still supported and can be used (this applies to: <code>CASNAME</code>, <code>CASHREF</code>, <code>ncmSERVER</code>, <code>ncmSERVER2</code>, <code>secretName</code>, <code>tlsSecretName</code>, <code>authNameSpace</code>), but they are not recommended to be used anymore.</p>"},{"location":"documentation/CRDs/cluster-issuer/#fields-description","title":"Fields description","text":"<p>As mentioned above, the <code>ClusterIssuer</code> differs practically in nothing from the <code>Issuer</code>, so the description of <code>Issuer</code> fields and their usage is also correct for it: issuer fields description.</p>"},{"location":"documentation/CRDs/issuer/","title":"Issuer","text":"<p>The first thing you need to configure and create after installing ncm-issuer is <code>Issuer</code> or <code>ClusterIssuer</code>.  The <code>Issuer</code> or <code>ClusterIssuer</code> is considered as a representative of an existing certificate authority (CA)  in the NCM that will issue certificates using it.</p>"},{"location":"documentation/CRDs/issuer/#resource-definition","title":"Resource definition","text":"<p>Below is an example <code>yaml</code> file containing <code>Issuer</code> definition:</p> issuer.yaml<pre><code>apiVersion: certmanager.ncm.nokia.com/v1\nkind: Issuer\nmetadata:\n  name: example-ncm-issuer\n  namespace: ncm-ns\nspec:\n  caName: ncm-ca\n  caID: e1DefAscx\n  provisioner:\n    mainAPI: https://nokia-ncm.local\n    backupAPI: https://nokia-backup-ncm.local\n    httpClientTimeout: 10s\n    healthCheckerInterval: 1m\n    authRef:\n      name: ncm-rest-auth\n      namespace: ncm-ns\n    tlsRef:\n      name: ncm-tls\n      namespace: ncm-ns\n  profileId: \"101\"\n  useProfileIDForRenew: true\n  reenrollmentOnRenew: true\n  noRoot: true\n  chainInSigner: false\n  onlyEECert: true\n</code></pre> <p>Warning</p> <p>With release <code>1.1.0-1.1.0</code> the name of some fields in <code>Issuer</code> has changed, but old names are still supported and can be used (this applies to: <code>CASNAME</code>, <code>CASHREF</code>, <code>ncmSERVER</code>, <code>ncmSERVER2</code>, <code>secretName</code>, <code>tlsSecretName</code>, <code>authNameSpace</code>), but they are not recommended to be used anymore.</p>"},{"location":"documentation/CRDs/issuer/#fields-description","title":"Fields description","text":"<p>The number next to the label icon indicates from which version the fields are supported.</p> <p> 1.1.0-1.1.0</p> Field Description <code>.spec.caName</code> Name of an existing CA in the NCM, which will be used to issue certificates <code>.spec.caID</code> Unique href (or ID) identifier for existing CA in the NCM, which will be used to issue certificates <code>.spec.provisioner.mainAPI</code> The URL to the main NCM API endpoint <code>.spec.provisioner.backupAPI</code> The URL to the backup NCM API endpoint in case of the lack of connection to the main one <code>.spec.provisioner.httpClientTimeout</code> Maximum amount of time that the HTTP client will wait for a response from NCM API before aborting the request <code>.spec.provisioner.healthCheckerInterval</code> The time interval between each NCM API health check <code>.spec.provisioner.authRef</code> Reference to a <code>secret</code> containing the credentials (user and password) needed for making requests to NCM API <code>.spec.provisioner.tlsRef</code> Reference to a <code>secret</code> containing CA bundle used to verify connections to the NCM API. If the secret reference is not specified and selected protocol is HTTPS, InsecureSkipVerify will be used. Otherwise, TLS or mTLS connection will be used, depending on provided data <p> 1.0.3-1.0.2</p> Field Description <code>.spec.chainInSigner</code> Determines whether certificate chain should be included in issued certificate CA field (<code>ca.crt</code> - root CA certificate + intermediate CA certificates + singing CA certificate) <code>.spec.onlyEECert</code> Determines whether only end-entity certificate should be included in issued certificate TLS field (<code>tls.crt</code>) <p> 1.0.1-1.0.0</p> Field Description <code>.spec.reenrollmentOnRenew</code> Determines whether during renewal, certificate should be re-enrolled instead of renewed <code>.spec.profileId</code> Entity profile ID in NCM <code>.spec.noRoot</code> Determines whether issuing CA certificate should be included in issued certificate CA field (<code>ca.crt</code>) instead of root CA certificate <p>Danger</p> <p>The following fields are not recommended to be used anymore!</p> Field Description <code>.spec.CASNAME</code> Name of an existing CA in the NCM, which will be used to issue certificates <code>.spec.CASHREF</code> Unique HREF identifier for existing CA in the NCM, which will be used to issue certificates <code>.spec.ncmSERVER</code> The URL to the main NCM API endpoint <code>.spec.ncmSERVER2</code> The URL to the backup NCM API endpoint in case of the lack of connection to the main one <code>.spec.SecretName</code> The name of <code>secret</code> which contains the credentials (user and password) needed for making requests to NCM REST API <code>.spec.authNameSpace</code> The name of namespace in which <code>secret</code> to NCM API credentials can be found <code>.spec.tlsSecretName</code> The name of <code>secret</code> which contains CA bundle used to verify connections to the NCM API"},{"location":"documentation/certificates/certificates/","title":"Renewing or re-enrolling","text":"<p>When it comes to renewing or re-enrolling certificates, ncm-issuer will take care of this and do it before the certificate expires (the renewal grace period depends on the defined values in <code>Certificate</code> resource).</p> <p>You can define what operation ncm-issuer should perform in such a case by setting certain PK rotation policy in <code>Certificate</code> resource.</p> Field Operation Value <code>.spec.privateKey.rotationPolicy</code> re-enrollment \"Always\" <code>.spec.privateKey.rotationPolicy</code> renewal \"Never\" or not even specified <p>Tip</p> <p>There is also an option for enforcing the re-enrollment on renewal in the definition of <code>Issuer</code> or <code>ClusterIssuer</code> resource. To do this simply set <code>.spec.reenrollmentOnRenew</code> to true in <code>Issuer</code> or <code>ClusterIssuer</code> definition.</p> <p>However, you can also trigger renewal or re-enrolling operation manually using one of the commands below.</p> <p>In case you have cert-manager kubectl plugin:</p> <pre><code>kubectl cert-manager renew &lt;certificate&gt; -n &lt;namespace&gt;\n</code></pre> <p>In case you use cmctl:</p> <pre><code>cmctl renew &lt;certificate&gt; -n &lt;namespace&gt;\n</code></pre>"},{"location":"documentation/metrics/enable-metrics/","title":"How to see ncm-issuer metrics?","text":""},{"location":"documentation/metrics/enable-metrics/#metrics-purpose","title":"Metrics purpose","text":"<p>The metrics implemented in the ncm-issuer are intended to reflect the actual number of requests for new certificate or renewal operations sent to the NCM. It should be noted here that the <code>CertificateRequest</code> resource created by the cert-manager and processed by ncm-issuer does not increment the metrics unless request is finally sent to the NCM and a new request is created in the NCM. The same approach is used for the certificate renewal operations.</p> <p>Example</p> <p>Let's assume that we have created a new <code>Certificate</code> resource and then cert-manager has created a new <code>CertificateRequest</code> for it, which is later processed by the ncm-issuer. At first no problems occurred, but it  turned out that there was no connection to the NCM API, ncm-issuer finished processing current <code>CertificateRequest</code> as it encountered error and cert-manger created new <code>CertificateRequest</code> resource. Does this mean that the metrics have been incremented? - No, as long as the request is not actually registered in NCM, none of the metrics  are incremented.</p>"},{"location":"documentation/metrics/enable-metrics/#enabling-ncm-issuer-metrics","title":"Enabling ncm-issuer metrics","text":"<p>To see the ncm-issuer metrics, simply change the value of <code>prometheus.serviceMonitor.enabled</code> to true in <code>values.yaml</code> and update your deployment. A service monitor for ncm-issuer should then be deployed, and the metrics should be visible in Prometheus GUI. Ensure the default values set for <code>prometheus.serviceMonitor.selectorLabel</code> and <code>prometheus.serviceMonitor.namespace</code> match your Prometheus configuration, if there are any differences change their values accordingly to your configuration.</p> <p>Below is an example configuration that enables ncm-issuer metrics - the Prometheus release is marked as <code>stable</code> and it is deployed in <code>default</code> namespace:</p> values.yaml<pre><code>prometheus:\nserviceMonitor:\n  enabled: true\n  selectorLabel: stable\n  namespace: default\n</code></pre>"},{"location":"documentation/metrics/enable-metrics/#metrics-types","title":"Metrics types","text":"<p><code>ncm_issuer_certificate_enrollment_total</code> - a prometheus metrics which holds the total number of enrollment  operations, equivalent to the action of sending CSR to the NCM.</p> <p><code>ncm_issuer_certificate_enrollment_success_total</code> - a prometheus metrics which holds the total number of succeeded enrollment operations.</p> <p><code>ncm_issuer_certificate_enrollment_fail_total</code> - a prometheus metrics which holds the total number of failed enrollment  operations. The failure of this operation may have been due to encountered errors or CSR status in the NCM indicating  rejection or postponement (ncm-issuer treats these statuses as not expected ones, which results in the failure of  enrollment operation).</p> <p><code>ncm_issuer_certificate_renewal_total</code> - a prometheus metrics which holds the total number of renewal operation  performed by ncm-issuer with usage of NCM.</p> <p><code>ncm_issuer_certificate_renewal_sucess_total</code> - a prometheus metrics which holds the total number of succeeded renewal  operation performed by ncm-issuer with usage of NCM.</p> <p><code>ncm_issuer_certificate_renewal_fail_total</code> - a prometheus metrics which holds the total number of failed renewal  operation performed by ncm-issuer with usage of NCM. The failure of this operation may have been due to an error in k8s API, a missing certificate details secret or an NCM API error.</p>"},{"location":"documentation/tutorials/first-certificate/","title":"Issuing your first certificate","text":""},{"location":"documentation/tutorials/first-certificate/#create-an-issuer","title":"Create an Issuer","text":"<p>Once the deployment is up and running, you are ready to create your first <code>Issuer</code>!</p> <p></p> <p>The following is an example <code>Issuer</code> created for the namespace <code>example-ncm-ns</code>:</p> <pre><code>cat &lt;&lt; EOF | kubectl apply -f -\napiVersion: certmanager.ncm.nokia.com/v1\nkind: Issuer\nmetadata:\n  name: example-ncm-issuer\n  namespace: example-ncm-ns\nspec:\n  caName: ncm-ca\n  provisioner:\n    mainAPI: https://nokia-ncm.local\n    authRef:\n      name: ncm-rest-auth\n      namespace: example-ncm-ns\nEOF\n</code></pre> <p>After creating the <code>Issuer</code>, we should now be able to check its status:</p> <pre><code>kubectl get ncmissuers -n example-ncm-ns\n\nNAME                 AGE   READY   REASON     MESSAGE\nexample-ncm-issuer   3s    True    Verified   Signing CA verified and ready to sign certificates\n</code></pre> <p>The above output tells us that our <code>Issuer</code> is ready to sign certificates!</p>"},{"location":"documentation/tutorials/first-certificate/#signing-certificate","title":"Signing certificate","text":"<p>Once the <code>Issuer</code> was successfully created, it is now time to sign the first certificate:</p> <p></p> <pre><code>cat &lt;&lt; EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: example-ncm-certificate\n  namespace: example-ncm-ns\nspec:\n  commonName: example-ncm-certificate-nokia-ncm.local\n  dnsNames:\n  - example-ncm-certificate-nokia-ncm.local\n  subject:\n    countries:\n    - PL\n    organizationalUnits:\n    - Security\n    organizations:\n    - Nokia\n  usages:\n  - server auth\n  - data encipherment\n  secretName: example-ncm-certificate-nokia-ncm-tls\n  issuerRef:\n    group: certmanager.ncm.nokia.com\n    kind: Issuer\n    name: example-ncm-issuer\nEOF\n</code></pre> <p>Then we can check the status of our newly issued certificate:</p> <pre><code>kubectl get certificates -n example-ncm-ns\n\nNAME                      READY   SECRET                                  AGE\nexample-ncm-certificate   True    example-ncm-certificate-nokia-ncm-tls   17s\n</code></pre> <p>and whether it has corresponding <code>secret</code> referenced:</p> <pre><code>kubectl get secrets -n example-ncm-ns\n\nNAME                                    TYPE                                  DATA   AGE\ndefault-token-g2f47                     kubernetes.io/service-account-token   3      18m\nexample-ncm-certificate-details         Opaque                                1      22s\nexample-ncm-certificate-nokia-ncm-tls   kubernetes.io/tls                     3      22s\n</code></pre> <p>Additionally, in NCM GUI we can also find our newly issued certificate.</p>"},{"location":"release-notes/1.0.1/","title":"The first official version of ncm-issuer!","text":"<ul> <li>Full integration with NCM (fetching CA from db, setting pem chain, adding issued certs to db, renewal support etc.)</li> <li>Installation via Helm charts</li> <li>Well-developed \"spec\" section in the issuer .yaml file</li> </ul>"},{"location":"release-notes/1.0.3/","title":"What's changed","text":"<p>ncm-issuer <code>1.0.3</code> includes several features and fixes for previously known issues.</p>"},{"location":"release-notes/1.0.3/#features","title":"Features","text":"<ul> <li>Added possibility to specify backup NCM API server in case of lack of connection to the main one</li> <li>Added possibility to include certificate chain (without end-entity certificate) in <code>ca.crt</code></li> <li>Added possibility to include only end-user certificate in <code>tls.crt</code></li> </ul> <p>For more detailed view about new features, see the  or !</p>"},{"location":"release-notes/1.0.3/#fixes","title":"Fixes","text":"<ul> <li>Fixed misinterpretation in case of manually triggering rotation of a private key (previously renewal operation was triggered instead of re-enrollment)</li> <li>Fixed bug related to certificates with long names</li> <li>Fixed several bugs during certificate renewal</li> </ul>"},{"location":"release-notes/1.0.3/#other","title":"Other","text":"<ul> <li>Bumped go from 1.17 to 1.19.6</li> </ul>"},{"location":"release-notes/1.1.0/","title":"What's changed","text":"<p>ncm-issuer <code>1.1.0</code> introduces a number of improvements mainly related to the logic of handling and sending requests to NCM API, but also significant enhancement to Helm chart. Besides the improvements, there are also a few features, including sidecar, selection of the logging verbosity level and Prometheus metrics.</p> <p> Warning: Read this before upgrading from version <code>&lt;1.1.0</code>!</p> <p>New, more user-friendly fields names are used to simplify the definition of <code>Issuer</code> and <code>ClusterIssuer</code>. This means that the old names are not suggested way of declaring them, but they will remain supported for a few more releases.</p> <p>New suggested way of defining <code>Issuer</code> or <code>ClusterIssuer</code> and their fields description: CRDs</p>"},{"location":"release-notes/1.1.0/#improvements","title":"Improvements","text":"<ul> <li>The <code>Issuer</code> and <code>ClusterIssuer</code> definitions are improved to use more user-friendly names and grouped into appropriate sections (see mentioned warning)</li> <li>NCM API errors (indicating that API is not available) or statuses indicating that certificate has not yet been  issued now results in CSRs being queued and processed after some time instead of being immediately re-processed and making unnecessary requests to NCM API</li> <li>Improve the mechanism responsible for the selection of NCM API - it's now based on the first-alive algorithm</li> <li>Helm chart is rewritten according to the rules given in the Helm documentation</li> </ul>"},{"location":"release-notes/1.1.0/#features","title":"Features","text":"<ul> <li>Add option to set HTTP client timeout</li> <li>Add option to set a time indicating how often NCM API(s) availability should be checked (related to new NCM API selection mechanism)</li> <li>Add Prometheus support to allow monitoring of the total number of enrollment or renewal operations. Each of these operations also has metrics responsible for determining how many of them were successful or failed. The metrics attempt to reflect the number of CSRs or renewals sent to the NCM, if request is rejected or postponed by NCM, this state will be reflected as failure of the enrollment operation, while accepting and returning appropriate resource will result in successful enrollment or renewal operation (use the prefix <code>ncm_issuer</code> in Prometheus query to see all possible metrics)</li> <li>More efficient debugging of ncm-issuer is added with the option of using sidecar or defining logging level verbosity (for more information, see: Troubleshooting)</li> </ul>"},{"location":"release-notes/1.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix occasionally encountered data-races when accessing saved <code>Issuer</code> or <code>ClusterIssuer</code> config</li> </ul>"},{"location":"release-notes/1.1.0/#other","title":"Other","text":"<ul> <li>Add ncm-issuer documentation hosted on GitHub pages (visit: documentation)</li> <li>Helm chart is now hosted on GitHub pages (link: https://nokia.github.io/ncm-issuer/charts)</li> </ul> <p>For more detailed view about new CRDs definition, troubleshooting and more, see: documentation</p>"}]}